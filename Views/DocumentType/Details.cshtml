@model Workflow_Document_Management_System_UI.DTOs.DocumentTypeResponseDto

@{
    ViewData["Title"] = "Details";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0 text-gray-800">Document Type Details</h1>
                <div>
                    <a asp-action="Edit" asp-route-id="@Model.DocumentTypeId" class="btn btn-warning">
                        <i class="fas fa-edit"></i> Edit
                    </a>
                    <a asp-action="Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </a>
                </div>
            </div>

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <div class="row">
                <div class="col-lg-8">
                    <div class="card shadow mb-4">
                        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                            <h6 class="m-0 font-weight-bold text-primary">Basic Information</h6>
                            <div class="dropdown no-arrow">
                                @if (Model.IsActive)
                                {
                                    <span class="badge badge-success">Active</span>
                                }
                                else
                                {
                                    <span class="badge badge-secondary">Inactive</span>
                                }
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-sm-3">
                                    <h6 class="mb-0">Document Type ID:</h6>
                                </div>
                                <div class="col-sm-9 text-secondary">
                                    <strong>@Model.DocumentTypeId</strong>
                                </div>
                            </div>
                            <hr>
                            <div class="row">
                                <div class="col-sm-3">
                                    <h6 class="mb-0">Type Name:</h6>
                                </div>
                                <div class="col-sm-9 text-secondary">
                                    <strong>@Model.TypeName</strong>
                                </div>
                            </div>
                            <hr>
                            <div class="row">
                                <div class="col-sm-3">
                                    <h6 class="mb-0">Description:</h6>
                                </div>
                                <div class="col-sm-9 text-secondary">
                                    @if (!string.IsNullOrEmpty(Model.Description))
                                    {
                                        @Model.Description
                                    }
                                    else
                                    {
                                        <em class="text-muted">No description provided</em>
                                    }
                                </div>
                            </div>
                            <hr>
                            <div class="row">
                                <div class="col-sm-3">
                                    <h6 class="mb-0">Allowed Extensions:</h6>
                                </div>
                                <div class="col-sm-9 text-secondary">
                                    @{
                                        var extensions = Model.AllowedExtensions.Split(',').Select(ext => ext.Trim());
                                    }
                                    @foreach (var ext in extensions)
                                    {
                                        <span class="badge badge-info me-1">@ext</span>
                                    }
                                </div>
                            </div>
                            <hr>
                            <div class="row">
                                <div class="col-sm-3">
                                    <h6 class="mb-0">Max File Size:</h6>
                                </div>
                                <div class="col-sm-9 text-secondary">
                                    <strong>@Model.MaxFileSizeMB MB</strong>
                                    <small class="text-muted">(@(Model.MaxFileSizeMB * 1024) KB)</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="card shadow mb-4">
                        <div class="card-header py-3">
                            <h6 class="m-0 font-weight-bold text-primary">Creation Information</h6>
                        </div>
                        <div class="card-body">
                            <div class="text-center">
                                <i class="fas fa-user-circle fa-3x text-primary mb-3"></i>
                                <h6 class="mb-2">Created By</h6>
                                <p class="text-muted mb-1">@Model.CreatedByUsername</p>
                                <small class="text-muted">Admin ID: @Model.CreatedByAdminId</small>
                            </div>
                            <hr>
                            <div class="text-center">
                                <i class="fas fa-calendar-alt fa-2x text-info mb-2"></i>
                                <h6 class="mb-1">Created Date</h6>
                                <p class="text-muted mb-0">@Model.CreatedDate.ToString("dddd, MMMM dd, yyyy")</p>
                                <small class="text-muted">@Model.CreatedDate.ToString("hh:mm tt")</small>
                            </div>
                        </div>
                    </div>

                    <div class="card shadow mb-4">
                        <div class="card-header py-3">
                            <h6 class="m-0 font-weight-bold text-primary">Quick Actions</h6>
                        </div>
                        <div class="card-body">
                            <div class="d-grid gap-2">
                                <a asp-action="Edit" asp-route-id="@Model.DocumentTypeId" class="btn btn-warning btn-block">
                                    <i class="fas fa-edit"></i> Edit Document Type
                                </a>
                                <button type="button" class="btn btn-danger btn-block"
                                        onclick="confirmDelete(@Model.DocumentTypeId, '@Model.TypeName')">
                                    <i class="fas fa-trash"></i> Delete Document Type
                                </button>
                                <a asp-action="Create" class="btn btn-success btn-block">
                                    <i class="fas fa-plus"></i> Create New Type
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- File Extension Details Card -->
            <div class="row">
                <div class="col-12">
                    <div class="card shadow mb-4">
                        <div class="card-header py-3">
                            <h6 class="m-0 font-weight-bold text-primary">File Extension Details</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                @{
                                    var allExtensions = Model.AllowedExtensions.Split(',').Select(ext => ext.Trim());
                                    var extensionCategories = new Dictionary<string, List<string>>
                                {
                                {"Documents", new List<string> {".pdf", ".doc", ".docx", ".txt", ".rtf"}},
                                {"Spreadsheets", new List<string> {".xls", ".xlsx", ".csv"}},
                                {"Images", new List<string> {".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tiff"}},
                                {"Archives", new List<string> {".zip", ".rar", ".7z", ".tar", ".gz"}},
                                {"Presentations", new List<string> {".ppt", ".pptx"}},
                                {"Other", new List<string>()}
                                };

                                    foreach (var ext in allExtensions)
                                    {
                                        bool found = false;
                                        foreach (var category in extensionCategories)
                                        {
                                            if (category.Value.Contains(ext.ToLower()))
                                            {
                                                found = true;
                                                break;
                                            }
                                        }
                                        if (!found)
                                        {
                                            extensionCategories["Other"].Add(ext);
                                        }
                                    }
                                }

                                @foreach (var category in extensionCategories.Where(c => c.Value.Any(ext => allExtensions.Contains(ext, StringComparer.OrdinalIgnoreCase))))
                                {
                                    <div class="col-md-3 mb-3">
                                        <div class="card bg-light">
                                            <div class="card-body text-center">
                                                <h6 class="card-title">@category.Key</h6>
                                                @foreach (var ext in category.Value.Where(e => allExtensions.Contains(e, StringComparer.OrdinalIgnoreCase)))
                                                {
                                                    <span class="badge badge-primary me-1">@ext</span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }

                                @if (extensionCategories["Other"].Any())
                                {
                                    <div class="col-md-3 mb-3">
                                        <div class="card bg-light">
                                            <div class="card-body text-center">
                                                <h6 class="card-title">Other</h6>
                                                @foreach (var ext in extensionCategories["Other"])
                                                {
                                                    <span class="badge badge-secondary me-1">@ext</span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the document type "<span id="deleteTypeName"></span>"?</p>
                <p class="text-danger"><i class="fas fa-exclamation-triangle"></i> This action cannot be undone and may affect existing documents.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function confirmDelete(id, typeName) {
            $('#deleteTypeName').text(typeName);
            $('#deleteForm').attr('action', '@Url.Action("Delete")/' + id);
            $('#deleteModal').modal('show');
        }

        // Auto-hide alerts after 5 seconds
        setTimeout(function() {
            $('.alert').fadeOut();
        }, 5000);

        // Add tooltips
        $(document).ready(function() {
            $('[data-toggle="tooltip"]').tooltip();
        });
    </script>
}
